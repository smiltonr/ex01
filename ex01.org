#+TITLE: Exercise 1: Simple Programs
#+AUTHOR: S Milton Rajendram

#+LaTeX_HEADER: \usepackage{palatino}
#+begin_latex
\linespread{1.2}
#+end_latex

| Assignment | 1 |
| Reg No     |   |
| Name       |   |
| Grade      |   |
| Date       |   | 

* Home work

** Objective
   To gain some familiarity with variables, assignment, output
   statement, control flow, functions, and arrays in C.

** Output (printf) statements
   Write a program to print this text, with the second and the fourth
   lines indended, on the stdout.
   #+BEGIN_EXAMPLE
   The heights by great men reached and kept
      Were not attained by sudden flight,
   But they, while their companions slept,
      Were toiling upward in the night.
   #+END_EXAMPLE

   1. Create a new program file =longfellow.c= in emacs. Edit your
      program.
   2. Create a makefile to compile your source program file
      =longfellow.c=, compile it to an executable program
      =longfellow=.
   3. If there are any errors as you compile, fix them.
   4. List the errors which occurred.

** Minimum of three numbers
   Write a program =min2.c= to read two numbers from stdin and print
   the smallest of the two numbers.
   1. Implement the functionality in =main()=.
   2. Divide your program into =main()= and another function
      =min2()=. Function =min2()= takes two numbers as inputs and
      returns as output the minimum of the two inputs.
   3. Design a function =min3()= that takes three numbers as inputs
      and returns as output the minimum of the three inputs.
   4. Design =min3()= in at least three different ways. Make one
      comment, good or bad, about each of the designs.


** Power $x^n$
   Construct a program =power.c=.
   1. A number $b$ raised to the power $m$, $b^m$, can be calculated
      by cumulatively multiplying 1 by $b$, $m$ times. For example, if
      $b = 2$ and $m = 5$, then the process for calculating $b^m =
      2^5$ proceeds as shown in the table below:
      |   p | p * 2   |
      |-----+---------|
      |   1 |         |
      | 2^1 | 1 * 2   |
      | 2^2 | 2^1 * 2 |
      | 2^3 | 2^2 * 2 |
      | 2^4 | 2^3 * 2 |
      | 2^5 | 2^4 * 2 |
      Implement a program to calculate the power $b^m$. Hardcode $b$
      and $m$ into your program (no need to read them from the
      user). Print the output, for example, as ~2^5 = 32~.
   2. Read $b$ and $m$ from the user (stdin) for the power
      program. First, print a prompt message to the user:
      #+BEGIN_EXAMPLE
      Enter the base and the exponent:
      #+END_EXAMPLE
   3. Define a function =power(x, n)= that raises $x$ to the power
      $n$. It takes =x= and =n= as parameters and returns the power
      $x^n$ as the result. Write the code for =power()= before
      =main()=. Call =power()= from =main()=.
   4. Write the code for =power()= /after/ =main()= and see the errors
      reported. Fix it: Let the code for =power()= be after
      =main()=. But write the prototype of =power()= before =main()=.
   5. In =power(x, n)=, instead of using a variable to count the
      number of iterations completed, use the parameter =n= to count
      the number iterations left to terminate the loop.
   6. List four idioms for repeating a loop $n$ times.
   7. Pass a negative exponent to =power()=. What is the error that
      occurs in the run time? Rename =power()= as =pos_power()= and
      write a function =power()= that works correctly for any integer
      exponent, positive or negative.

**  Table of powers
    Populate a table with powers $b^m$ for a given range of $m$.
    1. Modify your program =main()= to print powers $b^m$ for a number
       $b$ for powers from 0 to 20. Read =b= and =m= from the
       user. Format the output as shown below.
       #+BEGIN_EXAMPLE
       2^0  =       1
       2^1  =       2
       2^2  =       4
       2^3  =       8
       2^4  =      16
       ...
       2^20 = 1048576
       #+END_EXAMPLE 

    2. Declare an array of 100 numbers.  Store 10 numbers in the
       array. Write a function =print_array()= to print a
       subarray. The function takes three parameters, the array name
       =a=, the lower bound =low=, and the upper bound =high= of the
       subarray. Remember that the upper bound is open --- the
       subarray =a[low:high]= consists of =a[low] ... a[high-1]=
       (=a[high]= is not a part of the subarray). Drive
       =print_array()= from =main()=.
    3. Fill the subarray =a[0]...a[20]= with $2^0$ to $2^{20}$. Print
       it.
    4. Fill the subarray =a[0]...a[20]= with $2^{-10}$ to
       $2^{10}$. Print it.

* Questions
  Answer the following questions.
  1. How many lines are printed by =printf("Hello,\nworld!\nBye,\nworld!")=?
     1. 1
     2. 2
     3. 3
     4. 4
     Answer:
  2. What is the output?
     #+BEGIN_EXAMPLE
     a = 5; b = 10;
     a = b;
     b = a;
     printf ("a = %d, b = %d\n", a, b);
     #+END_EXAMPLE
     Answer:
  3. What is the output? What does the code do?
     #+BEGIN_EXAMPLE
     a = 5; b = 10;
     a = a+b;
     b = a-b;
     a = a-b;
     printf ("a = %d, b = %d\n", a, b);
     #+END_EXAMPLE
     Answer:
  4. What is the output? What does the code do?
     #+BEGIN_EXAMPLE
     a = 5; b = 10; c = 15;
     t = a;
     a = b;
     b = c;
     c = t;
     printf ("a = %d, b = %d, c = %d\n", a, b, c);
     #+END_EXAMPLE
     Answer:
  5. Translate the expression $d = \sqrt{b^2 - 4ac}$ into C statement.\\
     Answer:
  6. Translate the expression $d = \sqrt{(x_1 - x_2)^2 + (y_1 -
     y_2)^2}$ into C statement.\\
     Answer:
  7. What is the output?
     #+BEGIN_EXAMPLE
     a = 5; b = 10;
     m = a;
     if (b < m)
        m = b;
     printf ("%d\n", m);
     #+END_EXAMPLE
  8. What is the output?
     #+BEGIN_EXAMPLE
     mark = 40;
     if (mark < 50)
       grade = 'E';
     if (mark < 60)
       grade = 'D';
     if (mark < 70)
       grade = 'C'
     printf ("%c\n", grade);
     #+END_EXAMPLE
     Answer:
  9. Trace the process generated by the loop
     #+BEGIN_EXAMPLE
     n = 5;
     f = 1; i = 0;
     while (i < n) {
       f = f * i;
       i = i + 1;
     }
     #+END_EXAMPLE
     Answer:
     | i | f | i+1 | f*i |
     |   |   |     |     |
  10. Write a loop (while statement) which will generate the process shown in the table.
      | q |  r | r - 5  | q + 1 |
      | 0 | 22 |        |       |
      | 1 | 17 | 22 - 5 | 0 + 1 |
      | 2 | 12 | 17 - 5 | 1 + 1 |
      | 3 |  7 | 12 - 5 | 2 + 1 |
      | 4 |  2 | 7 - 2  | 3 + 1 |
      |   |    |        |       |
      Answer:
      #+BEGIN_EXAMPLE
      r = 22;
      q = 0;
      ...
      #+END_EXAMPLE
  
* Lab work
  1. Write a program to calculate the area of a circle. Read the
     radius from the user and print the output on the display.
  2. Write a program to calculate the perimeter of a circle. Read the
     radius from the user and print the output on the display.
  3. Write a program to calculate the area and the perimeter of a
     circle. Read the radius from the user and print the output on the
     display.
  4. Write functions to calculate
     1. the area of a circle
     2. the perimeter of a circle
     Write a program to read the radius from stdin, calculate the area
     and the perimeter of the circle, and print them on the stdout. In
     how many places do you have to make to increase the precision of
     $\pi$.
  5. Write a program to compute the distance between two points. To
     read a point, the program should read 2 numbers from the user for
     its the x and y coordinates.  So your program should read 4
     numbers for the two points. Print the output on the
     stdout. Implement a function =distance(x1, y1, x2, y2)= that
     takes two points =(x1, y1)= and =(x2, y2)= as 4 parameters and
     returns the distance between the two points.
  6. We want repeat a statement $n$ times. Use any of the idioms for
     repeating a loop $n$ times to print =Hail, Caesar!= 5 times.
  7. Which idiom will choose if we need to print
     1. how many times the loop has been iterated.
     2. how many more times th loop needs to be iterated.
     3. what is the iteration index.
  8. Using one of the loop idioms for iterating a loop $n$ times,
     implement a function to calculate factorial of a number.  Drive
     it from =main()=.
  9. Design a function to calculate the permutation of $n$ things
     taken $r$ at a time, $_nP_r$. Implement $_nP_r = \frac{n!}{(n-r)!}$
     1. Using =factorial (n)=
     2. Using $_nP_r = \frac{n!}{(n-r)!} = n . (n-1) . \ldots
        . (n-r+1)$.
  10. Implement a function to compute the GCD (greatest common
      divisor) of two integers. The Euclid's algorithm for GCD can be
      outlines as:
      #+BEGIN_EXAMPLE
      def gcd (m, n):
         if m < n:
            m, n = n, m
         while n > 0:
            m, n = n, m % n
         return m
      #+END_EXAMPLE
      Write a main program to test the function.
  11. Write a program to calculate the quotient and remainder while
      dividing an integer $a$ by an integer $b$.
